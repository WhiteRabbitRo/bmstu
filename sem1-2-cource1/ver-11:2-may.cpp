//что такое итератор?
// итератор - некая сущность позволяющая абстрагироваться от контейнера и
//последовательно получать доступ к данным
// есть много разных итераторов:
/*
    +input
    +forward
    +biderectional
    +random access

отдельно:
    -output
*/
auto begin = container.begin();
auto end = container.end();

for (; it!= end; ++it) {  //for (; it!= end --/оп 1/-- ; ++it --/оп 2/--) {
    cout<<*it; // --/оп 3/--
}
//такую сущность называют оператором ввода (++ * !=)

//для forward как в списке

//для biderectional (++ * !=) + "--"

// для random access iterator (++ * !=) + "--" + "[]"

// output iterator (отдельно) +"="


//Containers:

/*
//элементы контейнера называют ключами
Последовательные:
    vector
    array
    list
    forward_list
    deque
Упорядоченные: (ассоциативно упорядоченные)
     map <----это @; здесь оператор индексирования возвращаяет ссылку на ключ;
                //стандарт предпологает доступ по ключу за лог от н;
                //внути это уравновешанное бинарное дерево поиска;
                //используются красно-черные деревья
     set
     multimap //эти два позволяют хранить несколько одинаковых ключей:
     multiset
Неупорядоченные:
    через хеш таблицу //нужно определить хеш-функцию;
                      //каллизия - когда хеши от разных значений совпадают
                      //ячейки называются корзинами;
                      //рисунок смотри в 2280.jpg

*/
